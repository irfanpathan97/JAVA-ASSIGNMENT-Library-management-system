2.LIBRARY MANAGEMENT SYSTEM:
Classes and Methods:
===========================================================================
1.    Book:
o    Member Variables:
----------------------------------------------------------------
    title: String
    author: String
    category: String
    availability: boolean
o    Methods:
----------------------------------------------------------------
    getTitle(): String
    setTitle(title: String): void
    getAuthor(): String
    setAuthor(author: String): void
    getCategory(): String
    setCategory(category: String): void
    isAvailable(): boolean
    setAvailability(availability: boolean): void
==================================================
2.    Member:
o    Member Variables:
----------------------------------------------------------------
    name: String
    memberId: String
    borrowedBooks: ArrayList<Book>
o    Methods:
----------------------------------------------------------------
    getName(): String
    setName(name: String): void
    getMemberId(): String
    setMemberId(memberId: String): void
    getBorrowedBooks(): ArrayList<Book>
    borrowBook(book: Book): void
    returnBook(book: Book): void
=======================================================================
3.    Library:
o    Member Variables:
----------------------------------------------------------------
    books: HashMap<String, Book>
    members: HashMap<String, Member>
o    Methods:
----------------------------------------------------------------
    addBook(book: Book): void
    removeBook(bookId: String): void
    updateBook(bookId: String, updatedBook: Book): void
    searchBookByTitle(title: String): Book
    searchBookByAuthor(author: String): ArrayList<Book>
    searchBookByCategory(category: String): ArrayList<Book>
    addMember(member: Member): void
    removeMember(memberId: String): void
    updateMember(memberId: String, updatedMember: Member): void
    getMemberById(memberId: String): Member
    borrowBook(memberId: String, bookId: String): void
    returnBook(memberId: String, bookId: String): void
    displayAllBooks(): void
    displayAllMembers(): void
======================================================================
4.    Transaction:
o    Member Variables:
----------------------------------------------------------------
    transactions: ArrayList<TransactionRecord>
o    Methods:
----------------------------------------------------------------
    recordBorrowTransaction(memberId: String, bookId: String): void
    recordReturnTransaction(memberId: String, bookId: String): void
    displayTransactions(): void
=====================================================================
5.    TransactionRecord:
o    Member Variables:
----------------------------------------------------------------
    memberId: String
    bookTitle: String
    transactionType: String (Borrow/Return)
    transactionDate: Date
----------------------------------------------------------------
o    Methods:
    getMemberId(): String
    getBookId(): String
    getTransactionType(): String
    getTransactionDate(): Date
    displayTransactions()



import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;

// 1. Book Class
class Book {
    private String title;
    private String author;
    private String category;
    private boolean availability;

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public boolean isAvailable() {
        return availability;
    }

    public void setAvailability(boolean availability) {
        this.availability = availability;
    }
}

// 2. Member Class
class Member {
    private String name;
    private String memberId;
    private ArrayList<Book> borrowedBooks;

    public Member() {
        borrowedBooks = new ArrayList<>();
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getMemberId() {
        return memberId;
    }

    public void setMemberId(String memberId) {
        this.memberId = memberId;
    }

    public ArrayList<Book> getBorrowedBooks() {
        return borrowedBooks;
    }

    public void borrowBook(Book book) {
        if (book.isAvailable()) {
            borrowedBooks.add(book);
            book.setAvailability(false);
        } else {
            System.out.println("Book is not available.");
        }
    }

    public void returnBook(Book book) {
        if (borrowedBooks.contains(book)) {
            borrowedBooks.remove(book);
            book.setAvailability(true);
        } else {
            System.out.println("This book was not borrowed by the member.");
        }
    }
}

// 3. Library Class
class Library {
    private HashMap<String, Book> books;
    private HashMap<String, Member> members;

    public Library() {
        books = new HashMap<>();
        members = new HashMap<>();
    }

    public void addBook(Book book) {
        books.put(book.getTitle(), book);
    }

    public void removeBook(String bookId) {
        books.remove(bookId);
    }

    public void updateBook(String bookId, Book updatedBook) {
        books.put(bookId, updatedBook);
    }

    public Book searchBookByTitle(String title) {
        return books.get(title);
    }

    public ArrayList<Book> searchBookByAuthor(String author) {
        ArrayList<Book> result = new ArrayList<>();
        for (Book book : books.values()) {
            if (book.getAuthor().equalsIgnoreCase(author)) {
                result.add(book);
            }
        }
        return result;
    }

    public ArrayList<Book> searchBookByCategory(String category) {
        ArrayList<Book> result = new ArrayList<>();
        for (Book book : books.values()) {
            if (book.getCategory().equalsIgnoreCase(category)) {
                result.add(book);
            }
        }
        return result;
    }

    public void addMember(Member member) {
        members.put(member.getMemberId(), member);
    }

    public void removeMember(String memberId) {
        members.remove(memberId);
    }

    public void updateMember(String memberId, Member updatedMember) {
        members.put(memberId, updatedMember);
    }

    public Member getMemberById(String memberId) {
        return members.get(memberId);
    }

    public void borrowBook(String memberId, String bookId) {
        Member member = getMemberById(memberId);
        Book book = searchBookByTitle(bookId);
        if (member != null && book != null) {
            member.borrowBook(book);
        }
    }

    public void returnBook(String memberId, String bookId) {
        Member member = getMemberById(memberId);
        Book book = searchBookByTitle(bookId);
        if (member != null && book != null) {
            member.returnBook(book);
        }
    }

    public void displayAllBooks() {
        for (Book book : books.values()) {
            System.out.println(book.getTitle());
        }
    }

    public void displayAllMembers() {
        for (Member member : members.values()) {
            System.out.println(member.getName());
        }
    }
}

// 4. Transaction Class
class Transaction {
    private ArrayList<TransactionRecord> transactions;

    public Transaction() {
        transactions = new ArrayList<>();
    }

    public void recordBorrowTransaction(String memberId, String bookTitle) {
        transactions.add(new TransactionRecord(memberId, bookTitle, "Borrow", new Date()));
    }

    public void recordReturnTransaction(String memberId, String bookTitle) {
        transactions.add(new TransactionRecord(memberId, bookTitle, "Return", new Date()));
    }

    public void displayTransactions() {
        for (TransactionRecord transaction : transactions) {
            System.out.println(transaction.getTransactionType() + ": " + transaction.getBookTitle() +
                    " by Member ID: " + transaction.getMemberId() + " on " + transaction.getTransactionDate());
        }
    }
}

// 5. TransactionRecord Class
class TransactionRecord {
    private String memberId;
    private String bookTitle;
    private String transactionType;
    private Date transactionDate;

    public TransactionRecord(String memberId, String bookTitle, String transactionType, Date transactionDate) {
        this.memberId = memberId;
        this.bookTitle = bookTitle;
        this.transactionType = transactionType;
        this.transactionDate = transactionDate;
    }

    public String getMemberId() {
        return memberId;
    }

    public String getBookTitle() {
        return bookTitle;
    }

    public String getTransactionType() {
        return transactionType;
    }

    public Date getTransactionDate() {
        return transactionDate;
    }
}
